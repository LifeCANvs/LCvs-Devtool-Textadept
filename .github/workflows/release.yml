name: release
on:
  schedule:
    - cron: "0 4 * * *"
  workflow_dispatch:
    inputs:
      nightly:
        description: Nightly build
        type: boolean
        default: false
      debug:
        description: Debug symbols
        type: boolean
        default: false
      tag:
        description: Optional release tag (normally auto-detected)

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-20.04, windows-2019, macOS-12]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Checkout textadept-build dependencies
        uses: actions/checkout@v4
        with:
          repository: orbitalquark/textadept-build
          path: textadept-build

      - name: Install Qt (Windows, macOS)
        if: runner.os == 'Windows' || runner.os == 'macOS'
        uses: jurplel/install-qt-action@v3
        with:
          version: '6.5'
          modules: 'qt5compat'

      - name: Install Qt and Gtk (Linux)
        if: runner.os == 'Linux'
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install qtbase5-dev libgtk-3-dev --no-install-recommends -y

      - name: Build
        shell: bash
        run: |
          # Move cached dependencies into build/_deps.
          mkdir -p build/_deps && mv textadept-build/* build/_deps && rm -r textadept-build

          # Build.
          type="Release"
          if [[ ${{ github.event_name }} != schedule ]]; then
            if [[ "${{ github.event.inputs.nightly }}" = true ]]; then nightly="-D NIGHTLY=1"; fi
            if [[ "${{ github.event.inputs.debug }}" = true ]]; then type="Debug"; fi
          else
            nightly="-D NIGHTLY=1"
          fi
          cmake -S . -B build ${nightly} -D CMAKE_INSTALL_PREFIX=build/install
          cmake --build build --config ${type} -j
          cmake --install build --config ${type}
        env:
          VCINSTALLDIR: C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: artifacts-${{ matrix.os }}
          path: |
            build/*.tgz
            build/*.zip

  release:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install -y lua5.4 discount

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true

      - name: Determine version
        id: version
        shell: bash
        run: |
          version="${{ github.event.inputs.tag }}"
          if [[ -z "$version" ]]; then
            version=`ls -1 *.zip | head -1 | sed 's/[^_]\+_\(.\+\)\.[^.]\+\.zip/\1/;'`
          fi
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: Add HTML documentation
        shell: bash
        run: |
          # Generate HTML documentation.
          rm docs/*.html
          pushd docs
          for file in `ls *.md`; do
            cat _layouts/default.html | ../scripts/fill_layout.lua $file > `basename -s .md $file`.html
          done
          popd

          # Insert it into Windows and Linux archives.
          mkdir -p textadept/docs
          cp docs/*.html textadept/docs
          version=${{ steps.version.outputs.version }}
          if [[ -f textadept_$version.win.zip ]]; then
            zip -r textadept_$version.win.zip textadept/docs/*.html
          fi
          if [[ -f textadept_$version.linux.tgz ]]; then
            mv textadept_$version.linux.tgz textadept_$version.linux.tar.gz
            gunzip textadept_$version.linux.tar.gz
            tar --append -f textadept_$version.linux.tar textadept/docs/*.html
            gzip textadept_$version.linux.tar
            mv textadept_$version.linux.tar.gz textadept_$version.linux.tgz
          fi

          # Install it into macOS archive.
          mkdir -p Textadept.app/Contents/Resources/docs
          cp docs/*.html Textadept.app/Contents/Resources/docs
          if [[ -f textadept_$version.macOS.zip ]]; then
            zip -r textadept_$version.macOS.zip Textadept.app/Contents/Resources/docs/*.html
          fi

      - name: Package modules
        shell: bash
        run: |
          mkdir textadept-modules
          modules="debugger export file_diff format lsp lua_repl open_file_mode scratch spellcheck"
          for module in $modules; do
            gh_name="`echo -n $module | sed -e 's/_/-/g;'`"
            gh_prefix="https://github.com/orbitalquark/textadept-$gh_name"
            wget $gh_prefix/releases/download/latest/$module.zip
            unzip -d textadept-modules $module.zip
          done
          zip -r textadept_${{ steps.version.outputs.version }}.modules.zip textadept-modules

      - name: Tag
        run: |
          git tag textadept_${{ steps.version.outputs.version }}
          git push -f origin textadept_${{ steps.version.outputs.version }}

      - name: Create release log
        shell: bash
        run: |
          echo -n "Textadept " > log.md
          echo -n "${{ steps.version.outputs.version }} " | tr '_' ' ' >> log.md
          echo \(`date +"%d %b %Y"`\) >> log.md
          if [[ ${{ steps.version.outputs.version }} = nightly ]]; then exit 0; fi
          prefix="https://orbitalquark.github.io/textadept"
          echoing=0
          while read line; do
            if [[ $line == \#\#\#* ]]; then
              if [[ $echoing -eq 0 ]]; then
                echoing=1
              else
                exit 0
              fi
            elif [[ $echoing -eq 1 ]]; then
              echo "$line" | sed "s,\(manual\|api\)\.html,$prefix/\0,;"
            fi
          done < docs/changelog.md >> log.md

      - name: Upload release log
        uses: actions/upload-artifact@v4
        with:
          name: artifacts-release-log
          path: log.md

      - name: Create release
        uses: ncipollo/release-action@v1
        with:
          name: ${{ steps.version.outputs.version }}
          tag: textadept_${{ steps.version.outputs.version }}
          prerelease: |
            ${{ steps.version.outputs.version == 'nightly' ||
              contains(steps.version.outputs.version, 'alpha') ||
              contains(steps.version.outputs.version, 'beta') }}
          allowUpdates: true
          bodyFile: log.md
          artifacts: textadept_*
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: artifacts-release
          path: |
            textadept_${{ steps.version.outputs.version }}.modules.zip
            log.md

  test:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        exe: [textadept/textadept, textadept/textadept-curses]
        include:
          - os: ubuntu-latest
            exe: textadept/textadept-gtk
          - os: macOS-latest
            exe: Textadept.app/Contents/MacOS/textadept_osx
          #- os: macOS-latest
          #  exe: Textadept.app/Contents/MacOS/textadept-curses
      fail-fast: false
    runs-on: ${{ matrix.os }}
    needs: release
    timeout-minutes: 2
    steps:
      - name: Install Qt, Gtk, xterm, and matchbox-window-manager (Linux)
        if: runner.os == 'Linux'
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install qtbase5-dev libgtk-3-dev xterm matchbox-window-manager \
            gdb lua5.4 lua-socket clang-format clangd --no-install-recommends -y

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true

      - name: Unpack Textadept (Windows)
        if: runner.os == 'Windows'
        shell: bash
        run: unzip textadept_*.win.zip

      - name: Unpack Textadept (macOS)
        if: runner.os == 'macOS'
        shell: bash
        run: unzip textadept_*.macOS.zip

      - name: Unpack Textadept (Linux)
        if: runner.os == 'Linux'
        shell: bash
        run: tar xzf textadept_*.linux.tgz

      - name: Unpack modules (Windows, Linux)
        if: runner.os != 'macOS'
        shell: bash
        run: |
          unzip textadept_*.modules.zip
          mv textadept-modules/* textadept/modules

      - name: Unpack modules (macOS)
        if: runner.os == 'macOS'
        shell: bash
        run: |
          unzip textadept_*modules.zip
          mv textadept-modules/* Textadept.app/Contents/Resources/modules

      - name: Run unit tests (Windows)
        if: runner.os == 'Windows'
        shell: cmd
        run: start "" /d ${{ github.workspace }} /wait ${{ matrix.exe }} -t
        continue-on-error: true

      - name: Run unit tests (macOS)
        if: runner.os == 'macOS'
        shell: bash
        run: ${{ matrix.exe }} -t
        #run: |
        #  echo "cd ${{ github.workspace }}" > run.sh
        #  echo "${{ matrix.exe }} -t" >> run.sh
        #  open -W -a Terminal run.sh # TODO: never exits since Terminal.app does not quit
        continue-on-error: true

      - name: Run unit tests (Linux)
        if: runner.os == 'Linux'
        shell: bash
        run: xvfb-run -a xterm -e ${{ matrix.exe }} -t

      - name: Read test output
        shell: bash
        run: |
          cat test.log
          tail test.log | grep -q "0 failed"

  coverage:
    if: github.event.inputs.nightly || github.event_name == 'schedule'
    runs-on: ubuntu-latest
    needs: release
    timeout-minutes: 5
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Checkout textadept-build dependencies
        uses: actions/checkout@v4
        with:
          repository: orbitalquark/textadept-build
          path: textadept-build

      - name: Checkout LuaCov
        uses: actions/checkout@v4
        with:
          repository: lunarmodules/luacov
          path: luacov

      - name: Install dependencies
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install qtbase5-dev libgtk-3-dev xterm matchbox-window-manager lua5.4 gcovr \
            gdb lua-socket clang-format clangd --no-install-recommends -y

          patch -d luacov -p1 < src/luacov.patch
          sudo mkdir -p /usr/share/lua/5.4
          sudo cp -r luacov/src/luacov* /usr/share/lua/5.4
          sudo cp luacov/src/bin/luacov /usr/bin
          rm -r luacov

      - name: Build for coverage
        shell: bash
        run: |
          # Move cached dependencies into build/_deps.
          mkdir -p build/_deps && mv textadept-build/* build/_deps && rm -r textadept-build

          # Build.
          cmake -S . -B build -D NIGHTLY=1 -D PROFILE=1
          cmake --build build --config Debug -j

          # Copy lexers.
          cp -r build/_deps/scintillua-src/lexers .

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true

      - name: Unpack modules
        shell: bash
        run: |
          unzip textadept_*.modules.zip
          mv textadept-modules/* modules

      - name: Run tests
        shell: bash
        run: |
          xvfb-run -a build/textadept -t -T || true
          xvfb-run -a build/textadept-gtk -t -T || true
          xvfb-run -a xterm -e build/textadept-curses -t -T
        env:
          TEXTADEPT_HOME: ${{ github.workspace }}

      - name: Process coverage reports
        shell: bash
        run: lua scripts/gen_cov.lua github . >> log.md

      - name: Update release log with coverage info
        uses: ncipollo/release-action@v1
        with:
          name: nightly
          tag: textadept_nightly
          prerelease: true
          allowUpdates: true
          bodyFile: log.md
          token: ${{ secrets.GITHUB_TOKEN }}
